 - Path Parameters :-

        Path Parameters in FastAPI allow you to create dynamic URL routes that can accept variables directly from the URL. These parameters are defined within curly braces `{}` in the route path, making it possible to extract values when a request is made. For instance, if you define a route like `/items/{item_id}`, the `item_id` serves as a placeholder for any item identifier you want to retrieve. When a GET request is made to a URL such as `/items/42`, FastAPI captures `42` as the value for `item_id`, which can then be used within the corresponding function. This feature enables the creation of RESTful APIs where specific resources can be accessed using meaningful identifiers, enhancing the API's flexibility and usability.

 - Path parameters with types :-

        Path parameters with types in FastAPI enhance the functionality of API endpoints by allowing you to specify the expected data types for dynamic parameters in the URL. By defining path parameters with types, FastAPI can perform automatic data validation and conversion, ensuring that the values passed in the URL meet the expected types. For example, if you define a route like `/items/{item_id}`, you can specify the type of `item_id` as an integer by defining the function parameter as `async def read_item(item_id: int)`. This way, if a request is made to a URL such as `/items/42`, FastAPI will convert `42` to an integer and pass it to the function. If a user tries to access a URL with a non-integer value, such as `/items/abc`, FastAPI will automatically return a 422 Unprocessable Entity error, indicating that the input was invalid. This feature makes APIs more robust and user-friendly, as it ensures that clients provide the correct data types when interacting with the API.
