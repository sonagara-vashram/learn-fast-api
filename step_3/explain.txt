 - Query Parameters :-

        Query parameters in FastAPI are key-value pairs that are included in the URL after the question mark (`?`). They allow clients to pass optional parameters to the API endpoint, providing flexibility in how requests are made. For example, if you define a route like `/items/`, you can use query parameters to filter or modify the response, such as `/items/?skip=0&limit=10`. In this case, `skip` and `limit` are query parameters that dictate how many items to skip and how many to return, respectively. To define query parameters in FastAPI, you simply add them as function parameters with default values in your route function. For instance, `async def read_items(skip: int = 0, limit: int = 10)`. FastAPI will automatically handle the extraction and conversion of these query parameters from the URL, providing a user-friendly interface for clients to interact with your API. If a client omits a query parameter, FastAPI uses the default value specified in the function definition, making it easy to handle optional inputs.

 - Optional parameters :-

        Optional parameters in Query Parameters allow you to define parameters that do not need to be provided by the client when making a request to an API endpoint. In FastAPI, you can create optional parameters by assigning default values to them in the function definition. For example, consider a route defined as `@app.get("/items/")` with an asynchronous function `async def read_items(skip: int = 0, limit: int = 10)`. In this case, both `skip` and `limit` are optional query parameters, where `skip` defaults to 0 and `limit` defaults to 10. This means that if a client requests the endpoint without including these parameters, FastAPI will automatically use the default values. For instance, a request to `http://localhost:8000/items/` will return `{"skip": 0, "limit": 10}`. However, if a client specifies `http://localhost:8000/items/?skip=5`, FastAPI will interpret this request, apply the provided `skip` value of 5, and use the default value for `limit`, resulting in a response of `{"skip": 5, "limit": 10}`. This feature makes APIs flexible and user-friendly, allowing clients to provide only the parameters they need while still maintaining sensible defaults.

 - Query parameter type conversion :-

        Query parameter type conversion in FastAPI refers to the automatic process by which FastAPI validates and converts query parameters from string format to the specified types in the function signature. When a client makes a request to an endpoint, any query parameters provided in the URL are initially treated as strings. However, by specifying the desired type for each parameter in the function definition, FastAPI handles the conversion seamlessly. For example, if you define a route with a query parameter like `async def read_items(limit: int = 10)`, FastAPI will automatically convert the `limit` parameter from a string to an integer if the client provides a value like `/items/?limit=5`. If the conversion is successful, the function receives the correct type, allowing for accurate processing. If a user attempts to pass an invalid value that cannot be converted (like `/items/?limit=abc`), FastAPI will respond with a 422 Unprocessable Entity error, indicating that the input was invalid. This feature enhances the robustness of the API, ensuring that only correctly typed data is processed while providing clear feedback to clients on input errors.
